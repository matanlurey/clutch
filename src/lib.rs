use std::{iter::Peekable, str::Chars};

/// Generates tokens from a source string.
pub struct Lexer<'a> {
    scanner: Peekable<Chars<'a>>,
}

impl Lexer<'_> {
    /// Create a new Lexer from a `source` string slice.
    #[must_use]
    pub fn new(source: &str) -> Lexer {
        Lexer {
            scanner: source.chars().peekable(),
        }
    }
}

impl Iterator for Lexer<'_> {
    type Item = Token;

    /// Generate the next token from the source.
    ///
    /// If the lexer is at the end of the source, this will return [None].
    fn next(&mut self) -> Option<Self::Item> {
        while let Some(c) = self.scanner.next() {
            match c {
                'a'..='z' | 'A'..='Z' => {
                    let mut identifier = String::new();
                    identifier.push(c);

                    for c in self.scanner.by_ref() {
                        if c.is_alphanumeric() || c == '_' {
                            identifier.push(c);
                        } else {
                            break;
                        }
                    }

                    return Some(Token::Identifier(identifier));
                }
                '\'' => {
                    let mut string = String::new();

                    for c in self.scanner.by_ref() {
                        if c == '\'' {
                            break;
                        }

                        string.push(c);
                    }

                    return Some(Token::Literal(Literal::String(string)));
                }
                '(' => return Some(Token::OpenParenthesis),
                ')' => return Some(Token::CloseParenthesis),
                '{' => return Some(Token::OpenCurlyBrace),
                '}' => return Some(Token::CloseCurlyBrace),
                '=' => {
                    if let Some('=') = self.scanner.peek() {
                        self.scanner.next();
                        return Some(Token::FatArrow);
                    }
                    return Some(Token::Equals);
                }
                // Skip whitespace.
                ' ' | '\t' | '\n' | '\r' => continue,
                _ => {}
            }
        }

        None
    }
}

/// A token that represents a part of the source code.
///
/// Tokens are generated by the [Lexer] from a source string.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Token {
    /// A keyword token.
    Keyword(Keyword),

    /// An identifier token.
    Identifier(String),

    /// A literal token.
    Literal(Literal),

    /// A symbol token representing `(`.
    OpenParenthesis,

    /// A symbol token representing `)`.
    CloseParenthesis,

    /// A symbol token representing `{`.
    OpenCurlyBrace,

    /// A symbol token representing `}`.
    CloseCurlyBrace,

    /// A symbol token representing `=>`.
    FatArrow,

    /// A symbol token representing `=`.
    Equals,
}

/// A keyword that can be represented in the source code.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Keyword {
    /// The `let` keyword.
    Let,
}

/// A literal value that can be represented in the source code.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Literal {
    String(String),
}

/// An error that can occur when scanning the source.
#[derive(Debug, PartialEq, Eq)]
pub enum ScannerError {
    /// The scanner position would go out of bounds.
    OutOfBounds,
}
